/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface AboutUs {
    }
    interface AppAbout {
    }
    interface BookAppointment {
    }
    interface CircleCard {
    }
    interface DoctorList {
    }
    interface ImageShow {
    }
    interface LogoLogin {
    }
    interface MyAppointment {
    }
    interface MyContactform {
    }
    interface MyFooter {
        "Color": string;
    }
    interface MyHome {
    }
    interface MyLogin {
    }
    interface MyNavbar {
        "backColor": string;
        "fontFamily": string;
        "fontSize": string;
        "textColor": string;
    }
    interface NyHeading {
        "name": string;
    }
    interface OptionButtons {
    }
    interface ShowDoctor {
    }
}
declare global {
    interface HTMLAboutUsElement extends Components.AboutUs, HTMLStencilElement {
    }
    var HTMLAboutUsElement: {
        prototype: HTMLAboutUsElement;
        new (): HTMLAboutUsElement;
    };
    interface HTMLAppAboutElement extends Components.AppAbout, HTMLStencilElement {
    }
    var HTMLAppAboutElement: {
        prototype: HTMLAppAboutElement;
        new (): HTMLAppAboutElement;
    };
    interface HTMLBookAppointmentElement extends Components.BookAppointment, HTMLStencilElement {
    }
    var HTMLBookAppointmentElement: {
        prototype: HTMLBookAppointmentElement;
        new (): HTMLBookAppointmentElement;
    };
    interface HTMLCircleCardElement extends Components.CircleCard, HTMLStencilElement {
    }
    var HTMLCircleCardElement: {
        prototype: HTMLCircleCardElement;
        new (): HTMLCircleCardElement;
    };
    interface HTMLDoctorListElement extends Components.DoctorList, HTMLStencilElement {
    }
    var HTMLDoctorListElement: {
        prototype: HTMLDoctorListElement;
        new (): HTMLDoctorListElement;
    };
    interface HTMLImageShowElement extends Components.ImageShow, HTMLStencilElement {
    }
    var HTMLImageShowElement: {
        prototype: HTMLImageShowElement;
        new (): HTMLImageShowElement;
    };
    interface HTMLLogoLoginElement extends Components.LogoLogin, HTMLStencilElement {
    }
    var HTMLLogoLoginElement: {
        prototype: HTMLLogoLoginElement;
        new (): HTMLLogoLoginElement;
    };
    interface HTMLMyAppointmentElement extends Components.MyAppointment, HTMLStencilElement {
    }
    var HTMLMyAppointmentElement: {
        prototype: HTMLMyAppointmentElement;
        new (): HTMLMyAppointmentElement;
    };
    interface HTMLMyContactformElement extends Components.MyContactform, HTMLStencilElement {
    }
    var HTMLMyContactformElement: {
        prototype: HTMLMyContactformElement;
        new (): HTMLMyContactformElement;
    };
    interface HTMLMyFooterElement extends Components.MyFooter, HTMLStencilElement {
    }
    var HTMLMyFooterElement: {
        prototype: HTMLMyFooterElement;
        new (): HTMLMyFooterElement;
    };
    interface HTMLMyHomeElement extends Components.MyHome, HTMLStencilElement {
    }
    var HTMLMyHomeElement: {
        prototype: HTMLMyHomeElement;
        new (): HTMLMyHomeElement;
    };
    interface HTMLMyLoginElement extends Components.MyLogin, HTMLStencilElement {
    }
    var HTMLMyLoginElement: {
        prototype: HTMLMyLoginElement;
        new (): HTMLMyLoginElement;
    };
    interface HTMLMyNavbarElement extends Components.MyNavbar, HTMLStencilElement {
    }
    var HTMLMyNavbarElement: {
        prototype: HTMLMyNavbarElement;
        new (): HTMLMyNavbarElement;
    };
    interface HTMLNyHeadingElement extends Components.NyHeading, HTMLStencilElement {
    }
    var HTMLNyHeadingElement: {
        prototype: HTMLNyHeadingElement;
        new (): HTMLNyHeadingElement;
    };
    interface HTMLOptionButtonsElement extends Components.OptionButtons, HTMLStencilElement {
    }
    var HTMLOptionButtonsElement: {
        prototype: HTMLOptionButtonsElement;
        new (): HTMLOptionButtonsElement;
    };
    interface HTMLShowDoctorElement extends Components.ShowDoctor, HTMLStencilElement {
    }
    var HTMLShowDoctorElement: {
        prototype: HTMLShowDoctorElement;
        new (): HTMLShowDoctorElement;
    };
    interface HTMLElementTagNameMap {
        "about-us": HTMLAboutUsElement;
        "app-about": HTMLAppAboutElement;
        "book-appointment": HTMLBookAppointmentElement;
        "circle-card": HTMLCircleCardElement;
        "doctor-list": HTMLDoctorListElement;
        "image-show": HTMLImageShowElement;
        "logo-login": HTMLLogoLoginElement;
        "my-appointment": HTMLMyAppointmentElement;
        "my-contactform": HTMLMyContactformElement;
        "my-footer": HTMLMyFooterElement;
        "my-home": HTMLMyHomeElement;
        "my-login": HTMLMyLoginElement;
        "my-navbar": HTMLMyNavbarElement;
        "ny-heading": HTMLNyHeadingElement;
        "option-buttons": HTMLOptionButtonsElement;
        "show-doctor": HTMLShowDoctorElement;
    }
}
declare namespace LocalJSX {
    interface AboutUs {
    }
    interface AppAbout {
    }
    interface BookAppointment {
    }
    interface CircleCard {
    }
    interface DoctorList {
    }
    interface ImageShow {
    }
    interface LogoLogin {
    }
    interface MyAppointment {
    }
    interface MyContactform {
    }
    interface MyFooter {
        "Color"?: string;
    }
    interface MyHome {
    }
    interface MyLogin {
    }
    interface MyNavbar {
        "backColor"?: string;
        "fontFamily"?: string;
        "fontSize"?: string;
        "textColor"?: string;
    }
    interface NyHeading {
        "name"?: string;
    }
    interface OptionButtons {
    }
    interface ShowDoctor {
    }
    interface IntrinsicElements {
        "about-us": AboutUs;
        "app-about": AppAbout;
        "book-appointment": BookAppointment;
        "circle-card": CircleCard;
        "doctor-list": DoctorList;
        "image-show": ImageShow;
        "logo-login": LogoLogin;
        "my-appointment": MyAppointment;
        "my-contactform": MyContactform;
        "my-footer": MyFooter;
        "my-home": MyHome;
        "my-login": MyLogin;
        "my-navbar": MyNavbar;
        "ny-heading": NyHeading;
        "option-buttons": OptionButtons;
        "show-doctor": ShowDoctor;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "about-us": LocalJSX.AboutUs & JSXBase.HTMLAttributes<HTMLAboutUsElement>;
            "app-about": LocalJSX.AppAbout & JSXBase.HTMLAttributes<HTMLAppAboutElement>;
            "book-appointment": LocalJSX.BookAppointment & JSXBase.HTMLAttributes<HTMLBookAppointmentElement>;
            "circle-card": LocalJSX.CircleCard & JSXBase.HTMLAttributes<HTMLCircleCardElement>;
            "doctor-list": LocalJSX.DoctorList & JSXBase.HTMLAttributes<HTMLDoctorListElement>;
            "image-show": LocalJSX.ImageShow & JSXBase.HTMLAttributes<HTMLImageShowElement>;
            "logo-login": LocalJSX.LogoLogin & JSXBase.HTMLAttributes<HTMLLogoLoginElement>;
            "my-appointment": LocalJSX.MyAppointment & JSXBase.HTMLAttributes<HTMLMyAppointmentElement>;
            "my-contactform": LocalJSX.MyContactform & JSXBase.HTMLAttributes<HTMLMyContactformElement>;
            "my-footer": LocalJSX.MyFooter & JSXBase.HTMLAttributes<HTMLMyFooterElement>;
            "my-home": LocalJSX.MyHome & JSXBase.HTMLAttributes<HTMLMyHomeElement>;
            "my-login": LocalJSX.MyLogin & JSXBase.HTMLAttributes<HTMLMyLoginElement>;
            "my-navbar": LocalJSX.MyNavbar & JSXBase.HTMLAttributes<HTMLMyNavbarElement>;
            "ny-heading": LocalJSX.NyHeading & JSXBase.HTMLAttributes<HTMLNyHeadingElement>;
            "option-buttons": LocalJSX.OptionButtons & JSXBase.HTMLAttributes<HTMLOptionButtonsElement>;
            "show-doctor": LocalJSX.ShowDoctor & JSXBase.HTMLAttributes<HTMLShowDoctorElement>;
        }
    }
}
